@page "/roles/create"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@layout _RoleManagementToolsLayout

<h5 class="bg-primary text-white text-center p-2">Create Role</h5>

<EditForm OnValidSubmit="HandleValidSubmit" Model="@_roleModel">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary class="text-danger"></ValidationSummary>
    <div class="form-group">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="_roleModel.Name"/>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
    <NavLink class="btn btn-secondary" href="Roles">go back</NavLink>
</EditForm>

@if (_errors.Any())
{
    <ul>
        @foreach (var error in _errors)
        {
            <li>@error.Description - @error.Code</li>
        }
    </ul>
}

@code {
    private EditRoleModel _roleModel = new EditRoleModel();
    private List<IdentityError> _errors = new List<IdentityError>();

    private async void HandleValidSubmit()
    {
        _errors.Clear();
        var result = await HttpClient.PostAsJsonAsync("api/roles", _roleModel);
        if (result.StatusCode == HttpStatusCode.OK)
        {
            NavigationManager.NavigateTo("roles");
        }
        else
        {
            var errorResult = await result.Content.ReadFromJsonAsync<IEnumerable<IdentityError>>();
            if (errorResult.Any())
            {
                _errors = errorResult.ToList();
                StateHasChanged();
            }
        }
    }

}