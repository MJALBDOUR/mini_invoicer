@page "/users/create"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@layout _UserManagementToolsLayout
<h5 class="bg-primary text-white text-center p-2">Create User</h5>

<EditForm OnValidSubmit="HandleValidSubmit" Model="@_userModel">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary class="text-danger"></ValidationSummary>
    <div class="form-group">
        <label>User Name</label>
        <InputText class="form-control" @bind-Value="_userModel.Username"/>
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="_userModel.Email"/>
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText type="password" class="form-control"  @bind-Value="_userModel.Password"/>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
    <NavLink class="btn btn-secondary" href="users">go back</NavLink>
</EditForm>

@if (errors.Any())
{
    <ul>
    @foreach (var error in errors)
        {
            <li>@error</li>
        }    
    </ul>
    
}

@code {
    private EditUserModel _userModel = new EditUserModel();
    private List<string> errors = new List<string>();
    
    private async void HandleValidSubmit()
    {
        errors.Clear();
        var result = await HttpClient.PostAsJsonAsync("api/users", _userModel);
        if (result.StatusCode == HttpStatusCode.Accepted)
        {
            NavigationManager.NavigateTo("/users");
        }
        else
        {
            errors = await result.Content.ReadFromJsonAsync<List<String>>();
            StateHasChanged();
        }
    }
}