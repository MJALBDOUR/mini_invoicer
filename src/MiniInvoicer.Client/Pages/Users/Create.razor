@page "/users/create"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@layout _UserManagementToolsLayout
<h5 class="bg-primary text-white text-center p-2">Create User</h5>

<EditForm OnValidSubmit="HandleValidSubmit" Model="@_userModel">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary class="text-danger"></ValidationSummary>
    <div class="form-group">
        <label>User Name</label>
        <InputText class="form-control" @bind-Value="_userModel.Username"/>
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="_userModel.Email"/>
    </div>
    <div class="form-group">
        <label>Role</label>
        @if (_roles == null)
        {
            <em style="margin: 30px">Loading roles...</em>
        }
        else if (!_roles.Any())
        {
            <div class="card">
                <div class="card-header">No roles found</div>
                <div class="card-body">
                    Add ROLES to use this feature
                </div>
                <div class="card-footer">
                    <NavLink href="roles/create" class="btn btn-outline-primary">+</NavLink>
                </div>
            </div>
        }
        else
        {
            <InputSelect @bind-Value="_userModel.RoleId" class="form-control">
                <option value="none">none</option>
                @foreach (var role in _roles)
                {
                    <option value="@role.Id">@role.Name</option>
                }
            </InputSelect>
        }

    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="_userModel.Password"/>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
    <NavLink class="btn btn-secondary" href="users">go back</NavLink>
</EditForm>

@if (_errors.Any() && _errors != null)
{
    <ul>
        @foreach (var error in _errors)
        {
            <li>@error.Description - @error.Code</li>
        }
    </ul>
}

@code {
    private EditUserModel _userModel = new EditUserModel();
    private List<IdentityError> _errors = new List<IdentityError>();
    private List<IdentityRole> _roles;

    protected override async Task OnInitializedAsync()
    {
        _roles = await HttpClient.GetFromJsonAsync<List<IdentityRole>>("api/roles");
    }

    private async void HandleValidSubmit()
    {
        _errors.Clear();
        var result = await HttpClient.PostAsJsonAsync("api/users", _userModel);
        if (result.StatusCode == HttpStatusCode.Accepted)
        {
            NavigationManager.NavigateTo("users");
        }
        else
        {
            var errorResult = await result.Content.ReadFromJsonAsync<IEnumerable<IdentityError>>();
            if (errorResult.Any())
            {
                _errors = errorResult.ToList();
                StateHasChanged();
            }
        }
    }

}