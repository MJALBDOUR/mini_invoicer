@page "/users"
@inject HttpClient HttpClient
@layout _UserManagementToolsLayout

@if (_users == null)
{
    <em style="margin: 30px; display: block;">Loading...</em>
}
else if (!_users.Any())
{
    
    <h3 style="margin: 30px; display: block;">No users found</h3>
}
else
{
    <table class="table table-sm table-bordered">
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Email</th>
            <th>Role</th>
            <th></th>
        </tr>
        @if (!_users.Any())
        {
            <tr>
                <td colspan="4" class="text-center">No User Accounts</td>
            </tr>
        }
        else
        {
            foreach (UserViewModel user in _users)
            {
                <tr>
                    <td>@user.IdentityUser.Id</td>
                    <td>@user.IdentityUser.UserName</td>
                    <td>@user.IdentityUser.Email</td>
                    @if (user.IdentityRole == null)
                    {
                        <td>None</td>
                    }
                    else
                    {
                        <td>@user.IdentityRole.Name</td>
                    }
                    <td class="text-center">
                            <NavLink href="@($"users/edit/{user.IdentityUser.Id}")" class="btn btn-sm btn-warning">Edit</NavLink>
                            <button type="button" class="btn btn-sm btn-danger" @onclick="@(e => DeleteUser(user.IdentityUser.Id))">
                                Delete
                            </button>
                    </td>
                </tr>
            }
        }
    </table>
}
<NavLink class="btn btn-primary" href="users/create">Create</NavLink>

@if (string.IsNullOrWhiteSpace(_deleteMessage))
{
    <h6>@_deleteMessage</h6>
}

@code {
    private IEnumerable<UserViewModel> _users;
    private string _deleteMessage;
    
    protected override async Task OnInitializedAsync()
    {
        GetUsers();
    }
    private async void GetUsers()
    {
        _users = await HttpClient.GetFromJsonAsync<IEnumerable<UserViewModel>>("api/users");
        StateHasChanged();
    }
    
    private async Task DeleteUser(string id)
    {
        var result = await HttpClient.DeleteAsync($"api/users/{id}");
        if (result.IsSuccessStatusCode)
        {
            GetUsers();
            StateHasChanged();
        }
        else
        {
            _deleteMessage = await result.Content.ReadAsStringAsync();
        }
    }
}