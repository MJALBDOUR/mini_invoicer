@page "/users/edit/{id}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@layout _Layout

@if (_userModel == null)
{
    if (string.IsNullOrWhiteSpace(id))
    {
        <em style="margin: 30px">Invalid user, redirecting to /users</em>
    }
    else
    {
        <em style="margin: 30px">Loading user...</em>
    }                                            
}                                                
else
{
    <h5 class="bg-warning text-white text-center p-2">Edit User</h5>
    <EditForm OnValidSubmit="HandleValidSubmit" Model="_userModel">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label>ID</label>
            <InputText class="form-control" @bind-Value="_userModel.Id" disabled/>
        </div>
        <div class="form-group">
            <label>Username</label>
            <InputText class="form-control" @bind-Value="_userModel.Username"/>
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="_userModel.Email"/>
        </div>
        <div class="form-group">
            <label>New Password</label>
            <InputText type="password" class="form-control" @bind-Value="_userModel.Password"/>
        </div>
        <button type="submit" class="btn btn-warning">Submit</button>
        <NavLink class="btn btn-secondary" href="users">Back</NavLink>
    </EditForm>
}

@if (_errors.Any())
{
    <ul>
    @foreach (var error in _errors)
        {
            <li>@error</li>
        }    
    </ul>
    
}

@code {

    [Parameter]
    public string id { get; set; }
    
    private EditUserModel _userModel;

    private List<string> _errors = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(id))
        {
            NavigationManager.NavigateTo("users", forceLoad:true);
        }
        var result = await HttpClient.GetAsync($"api/users/{id}");
        if (result.IsSuccessStatusCode)
        {
            var tempUser = await result.Content.ReadFromJsonAsync<EditUserModel>();
            if (tempUser == null)
            {
                NavigationManager.NavigateTo("/users");
            }
            _userModel = tempUser;
        }
    }

    private async void HandleValidSubmit()
    {
        _errors.Clear();
        var result = await HttpClient.PutAsJsonAsync("api/users", _userModel);
        if (result.StatusCode == HttpStatusCode.Accepted)
        {
            NavigationManager.NavigateTo("/users");
        }
        else
        {
            _errors = await result.Content.ReadFromJsonAsync<List<String>>();
            StateHasChanged();
        }
    }

}