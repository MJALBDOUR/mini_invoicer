@page "/users/edit/{id}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@layout _UserManagementToolsLayout

<h5 class="bg-warning text-white text-center p-2">Edit User</h5>
@if (_userModel == null)
{
    if (string.IsNullOrWhiteSpace(Id))
    {
        <em style="margin: 30px">Invalid user, redirecting to /users</em>
    }
    else
    {
        <em style="margin: 30px">Loading user...</em>
    }
}
else
{
    <EditForm OnValidSubmit="HandleValidSubmit" Model="_userModel">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label>ID</label>
            <InputText class="form-control" @bind-Value="_userModel.Id" disabled/>
        </div>
        <div class="form-group">
            <label>Username</label>
            <InputText class="form-control" @bind-Value="_userModel.Username"/>
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="_userModel.Email"/>
        </div>
        <div class="form-group">
            <label>Role</label>
            @if (_roles == null)
            {
                <em style="margin: 30px">Loading roles...</em>
            }
            else if (!_roles.Any())
            {
                <div class="card">
                    <div class="card-header">No roles found</div>
                    <div class="card-body">
                        Add ROLES to use this feature
                    </div>
                    <div class="card-footer">
                        <NavLink href="roles/create" class="btn btn-outline-primary">+</NavLink>
                    </div>
                </div>
            }
            else
            {
                <InputSelect @bind-Value="_userModel.RoleId" class="form-control">
                    <option value="none">none</option>
                    @foreach (var role in _roles)
                    {
                        <option value="@role.Id">@role.Name</option>
                    }
                </InputSelect>
            }
        </div>
        <div class="form-group">
            <label>New Password</label>
            <InputText type="password" class="form-control" @bind-Value="_userModel.Password"/>
        </div>
        <button type="submit" class="btn btn-warning">Submit</button>
        <NavLink class="btn btn-secondary" href="users">Back</NavLink>
    </EditForm>
}

@if (_errors.Any() && _errors != null)
{
    <ul>
        @foreach (var error in _errors)
        {
            <li>@error.Description - @error.Code</li>
        }
    </ul>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private EditUserModel _userModel;
    private List<IdentityRole> _roles;


    private List<IdentityError> _errors = new List<IdentityError>();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Id))
        {
            NavigationManager.NavigateTo("users", forceLoad: true);
        }
        var result = await HttpClient.GetAsync($"api/users/{Id}");
        if (result.IsSuccessStatusCode)
        {
            var tempUser = await result.Content.ReadFromJsonAsync<EditUserModel>();
            if (tempUser == null)
            {
                NavigationManager.NavigateTo("/users");
            }
            _userModel = tempUser;
        }
        _roles = await HttpClient.GetFromJsonAsync<List<IdentityRole>>("api/roles");
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        _errors.Clear();
        var result = await HttpClient.PutAsJsonAsync("api/users", _userModel);
        if (result.StatusCode == HttpStatusCode.Accepted)
        {
            NavigationManager.NavigateTo("/users");
        }
        else
        {
            var errorResult = await result.Content.ReadFromJsonAsync<IEnumerable<IdentityError>>();
            if (errorResult.Any())
            {
                _errors = errorResult.ToList();
                StateHasChanged();
            }
        }
    }

}